// language: metal2.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

struct _mslBufferSizes {
    uint size1;
    uint size2;
};

constexpr constant unsigned NUM_PARTICLES = 1500u;
typedef uint u32_;
typedef metal::float2 vec2f32_;
struct Particle {
    vec2f32_ pos;
    vec2f32_ vel;
};
typedef float f32_;
struct SimParams {
    f32_ deltaT;
    f32_ rule1Distance;
    f32_ rule2Distance;
    f32_ rule3Distance;
    f32_ rule1Scale;
    f32_ rule2Scale;
    f32_ rule3Scale;
};
typedef Particle arrayParticle[1];
struct Particles {
    arrayParticle particles;
};
typedef metal::uint3 vec3u32_;
typedef device Particles& ptrParticles;
typedef device arrayParticle& ptrarrayParticle;
typedef device Particle& ptrParticle;
typedef int i32_;
typedef constant SimParams& ptrSimParams;
typedef thread vec2f32_& ptrvec2f32_;
typedef device Particles& ptrParticles_1;
typedef device arrayParticle& ptrarrayParticle_1;
typedef device Particle& ptrParticle_1;

struct main_Input {
};
kernel void main_(
  vec3u32_ global_invocation_id [[thread_position_in_grid]]
, constant SimParams& params [[buffer(0)]]
, device Particles const& particlesSrc [[buffer(1)]]
, device Particles& particlesDst [[buffer(2)]]
, constant _mslBufferSizes& _buffer_sizes [[buffer(3)]]
) {
    vec2f32_ vPos = {};
    vec2f32_ vVel = {};
    vec2f32_ cMass = {};
    vec2f32_ cVel = {};
    vec2f32_ colVel = {};
    i32_ cMassCount = {};
    i32_ cVelCount = {};
    vec2f32_ pos = {};
    vec2f32_ vel = {};
    u32_ i = {};
    uint index = global_invocation_id.x;
    if (index >= NUM_PARTICLES) {
        return;
    }
    vec2f32_ _e8 = particlesSrc.particles[index].pos;
    vPos = _e8;
    vec2f32_ _e14 = particlesSrc.particles[index].vel;
    vVel = _e14;
    cMass = metal::float2(0.0, 0.0);
    cVel = metal::float2(0.0, 0.0);
    colVel = metal::float2(0.0, 0.0);
    cMassCount = 0;
    cVelCount = 0;
    i = 0u;
    bool loop_init = true;
    while(true) {
        if (!loop_init) {
            u32_ _e91 = i;
            i = _e91 + 1u;
        }
        loop_init = false;
        u32_ _e36 = i;
        if (_e36 >= NUM_PARTICLES) {
            break;
        }
        u32_ _e39 = i;
        if (_e39 == index) {
            continue;
        }
        u32_ _e43 = i;
        vec2f32_ _e46 = particlesSrc.particles[_e43].pos;
        pos = _e46;
        u32_ _e49 = i;
        vec2f32_ _e52 = particlesSrc.particles[_e49].vel;
        vel = _e52;
        vec2f32_ _e53 = pos;
        vec2f32_ _e54 = vPos;
        f32_ _e58 = params.rule1Distance;
        if (metal::distance(_e53, _e54) < _e58) {
            vec2f32_ _e60 = cMass;
            vec2f32_ _e61 = pos;
            cMass = _e60 + _e61;
            i32_ _e63 = cMassCount;
            cMassCount = _e63 + 1;
        }
        vec2f32_ _e66 = pos;
        vec2f32_ _e67 = vPos;
        f32_ _e71 = params.rule2Distance;
        if (metal::distance(_e66, _e67) < _e71) {
            vec2f32_ _e73 = colVel;
            vec2f32_ _e74 = pos;
            vec2f32_ _e75 = vPos;
            colVel = _e73 - (_e74 - _e75);
        }
        vec2f32_ _e78 = pos;
        vec2f32_ _e79 = vPos;
        f32_ _e83 = params.rule3Distance;
        if (metal::distance(_e78, _e79) < _e83) {
            vec2f32_ _e85 = cVel;
            vec2f32_ _e86 = vel;
            cVel = _e85 + _e86;
            i32_ _e88 = cVelCount;
            cVelCount = _e88 + 1;
        }
    }
    i32_ _e94 = cMassCount;
    if (_e94 > 0) {
        vec2f32_ _e97 = cMass;
        i32_ _e98 = cMassCount;
        vec2f32_ _e102 = vPos;
        cMass = (_e97 / metal::float2(static_cast<float>(_e98))) - _e102;
    }
    i32_ _e104 = cVelCount;
    if (_e104 > 0) {
        vec2f32_ _e107 = cVel;
        i32_ _e108 = cVelCount;
        cVel = _e107 / metal::float2(static_cast<float>(_e108));
    }
    vec2f32_ _e112 = vVel;
    vec2f32_ _e113 = cMass;
    f32_ _e116 = params.rule1Scale;
    vec2f32_ _e119 = colVel;
    f32_ _e122 = params.rule2Scale;
    vec2f32_ _e125 = cVel;
    f32_ _e128 = params.rule3Scale;
    vVel = ((_e112 + (_e113 * _e116)) + (_e119 * _e122)) + (_e125 * _e128);
    vec2f32_ _e131 = vVel;
    vec2f32_ _e133 = vVel;
    vVel = metal::normalize(_e131) * metal::clamp(metal::length(_e133), 0.0, 0.10000000149011612);
    vec2f32_ _e139 = vPos;
    vec2f32_ _e140 = vVel;
    f32_ _e143 = params.deltaT;
    vPos = _e139 + (_e140 * _e143);
    float _e147 = vPos.x;
    if (_e147 < -1.0) {
        vPos.x = 1.0;
    }
    float _e153 = vPos.x;
    if (_e153 > 1.0) {
        vPos.x = -1.0;
    }
    float _e159 = vPos.y;
    if (_e159 < -1.0) {
        vPos.y = 1.0;
    }
    float _e165 = vPos.y;
    if (_e165 > 1.0) {
        vPos.y = -1.0;
    }
    vec2f32_ _e174 = vPos;
    particlesDst.particles[index].pos = _e174;
    vec2f32_ _e179 = vVel;
    particlesDst.particles[index].vel = _e179;
    return;
}
