// language: metal2.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

struct _mslBufferSizes {
    uint size0;
};

typedef uint u32_;
typedef u32_ arrayu32_[1];
struct PrimeIndices {
    arrayu32_ data;
};
typedef metal::uint3 vec3u32_;
typedef device PrimeIndices& ptrPrimeIndices;
typedef device arrayu32_& ptrarrayu32_;

u32_ collatz_iterations(
    u32_ n_base
) {
    u32_ n = {};
    u32_ i = {};
    n = n_base;
    i = 0u;
    while(true) {
        u32_ _e4 = n;
        if (_e4 > 1u) {
        } else {
            break;
        }
        u32_ _e7 = n;
        if ((_e7 % 2u) == 0u) {
            u32_ _e12 = n;
            n = _e12 / 2u;
        } else {
            u32_ _e16 = n;
            n = (3u * _e16) + 1u;
        }
        u32_ _e20 = i;
        i = _e20 + 1u;
    }
    u32_ _e23 = i;
    return _e23;
}

struct main_Input {
};
kernel void main_(
  vec3u32_ global_id [[thread_position_in_grid]]
, device PrimeIndices& v_indices [[user(fake0)]]
, constant _mslBufferSizes& _buffer_sizes [[user(fake0)]]
) {
    u32_ _e9 = v_indices.data[global_id.x];
    u32_ _e10 = collatz_iterations(_e9);
    v_indices.data[global_id.x] = _e10;
    return;
}
